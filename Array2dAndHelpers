//Array2DB struct
enum CellState {
    case dead, alive, makeDead, makeAlive
}

struct Cell {
    var state:CellState
    var nextState:CellState?
    
    init(state:CellState) {
        self.state = state
    }
}

struct Array2DB:CustomStringConvertible {
    var values: [Cell]
    let rows: Int
    let cols: Int
    
    //creates the 2-dimensional abstraction of our 'values' array
    var description: String {
        var d = ""
        for r in 0..<rows {
            for c in 0..<cols {
                if c == cols - 1 {
                    d += "\(values[getIndex(row: r, col: c)])\n" //redo
                } else {
                    d += "\(values[getIndex(row: r, col: c)])"
                }
            }
        }
        return d
    }
    
    var count:Int {
        return values.count
    }
    
    //a count of all the cells that are currently alive.
    var numberLivingCells:Int {
        var c = 0
        for i in values {
            if i.state == CellState.alive {
                c += 1
            }
        }
        return c
    }
    
    //creates an empty array of 0's according to the specified number of rows and cols
    init(rows: Int, cols: Int) {
        self.rows = rows
        self.cols = cols
        values = [Cell](repeating: 0, count: (rows+2)*(cols+2)) //TODO: redo so it works
    }
    
    //allows us to use the syntax [row, col] when interacting with an Array2DB
    subscript(row: Int, col: Int) -> Cell {
        get {
            return values[getIndex(row: row, col: col)]
        }
        set(newValue) {
            values[getIndex(row: row, col: col)] = newValue
        }
    }
    
    //converts the abstract idea of row, col to the corresponding index in 'values'
    func getIndex(row: Int, col: Int) -> Int {
        assert((row >= -1) && (row <= rows), "row \(row) is out of bounds")
        assert((col >= -1) && (col <= cols), "col \(col) is out of bounds")
        return (row + 1)*rows + col + 1
    }
    
}

class Colony {
    var name:String
    var array:Array2DB
    
    init(name:String, size:Int) {
        self.name = name
        self.array = Array2DB(rows:size, cols:size)
    }
    
    //sets a cell to become alive on the next run
    func setCellAlive(row:Int, col:Int) {
        array[row, col].state = CellState.makeAlive
    }
    
    //kill a cell for the next run
    func setCellDead(row:Int, col:Int) {
        array[row, col].state = CellState.makeDead
    }
    
    //reset
    func resetColony() {
        for r in 0..<array.rows {
            for c in 0..<array.cols {
                
            }
        }
    }
    
    //finds if the cell named is alive.
    func isCellAlive(row:Int, col:Int) -> CellState {
        return array[row, col].state
    }
    
    func numSurroundingCellsAlive(row:Int, col:Int) -> Int {
        
    }
    
}

var a = Array2DB(rows:10, cols:10)
